### ekf config file ###
ekf_filter_node:
  ros__parameters:
    # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
    # computation until it receives at least one message from one of the inputs. It will then run continuously at the
    # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
    frequency: 30.0

    # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
    # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
    # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
    # by, for example, an IMU. Defaults to false if unspecified.
    two_d_mode: true

    # Whether to publish the acceleration state. Defaults to false if unspecified.
    publish_acceleration: true

    # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
    publish_tf: true

    # 1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
    #     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of odom_frame.
    # 2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set "world_frame"
    #    to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
    # 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates from landmark
    #    observations) then:
    #     3a. Set your "world_frame" to your map_frame value
    #     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state estimation node
    #         from robot_localization! However, that instance should *not* fuse the global data.
    #map_frame: map # Defaults to "map" if unspecified
    odom_frame: odom # Defaults to "odom" if unspecified
    base_link_frame: base_footprint # Defaults to "base_link" if unspecified
    world_frame: odom # Defaults to the value of odom_frame if unspecified

    odom0: /odom
    odom0_config:
      [
        true,
        true,
        true,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
      ]

    imu0: imu
    imu0_config:
      [
        false,
        false,
        false,
        true,
        true,
        true,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
      ]

    stamped_control:
      false

      # The last issued control command will be used in prediction for this period. Defaults to 0.2.
    control_timeout: 0.2

    # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
    control_config: [true, false, false, false, false, true]

    # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
    acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

    # Acceleration and deceleration limits are not always the same for robots.
    deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

    # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
    # gains
    acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

    # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
    # gains
    deceleration_gains:
      [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

      # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
      # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
      # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
      # However, if users find that a given variable is slow to converge, one approach is to increase the
      # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
      # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
      # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
      # unspecified.
      # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
      # both full specification or specification of only the diagonal values.
    process_noise_covariance:
      [
        0.05,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.05,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.06,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.03,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.03,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.06,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.025,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.025,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.04,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.02,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.015,
      ]
